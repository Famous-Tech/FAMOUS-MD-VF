const axios = require('axios');
const { zokou } = require("../framework/zokou");

const BaseUrl = 'https://api.giftedtechnexus.co.ke';
const downloadUrl = 'https://api.giftedtechnexus.co.ke/api/download/xnxxdl';
const giftedapikey = 'giftedtechk';

famous({ nomCom: "xx", reaction: "üì•", categorie: "T√©l√©chargement" }, async (dest, zk, commandeOptions) => {
  const { repondre, arg, ms } = commandeOptions;

  try {
    // V√©rifier si l'utilisateur a fourni un nom de vid√©o
    if (!arg || arg.length === 0) {
      return repondre("Veuillez fournir le nom de la vid√©o √† t√©l√©charger.");
    }

    const videoName = arg[0]; // Supposer que le premier argument est le nom de la vid√©o

    // Construire l'URL de la requ√™te pour t√©l√©charger la vid√©o
    const apiUrl = `${downloadUrl}?url=https://www.xnxx.health/video/${videoName}&apikey=${giftedapikey}`;

    // Effectuer la requ√™te √† l'API
    const response = await axios.get(apiUrl);

    // Extraire les donn√©es de la r√©ponse de l'API
    const { data } = response;

    // V√©rifier si la r√©ponse de l'API contient un lien de t√©l√©chargement
    if (data && data.downloadLink) {
      // Renvoyer le lien de t√©l√©chargement √† l'utilisateur
      repondre(`Voici votre vid√©o : [T√©l√©charger](${data.downloadLink})`);
    } else {
      // Si la r√©ponse ne contient pas de lien de t√©l√©chargement, renvoyer un message d'erreur
      repondre("Erreur lors du t√©l√©chargement de la vid√©o. V√©rifiez le nom de la vid√©o.");
    }
  } catch (error) {
    // G√©rer les erreurs √©ventuelles lors de l'appel √† l'API
    console.error("Erreur:", error.message || "Une erreur s'est produite");
    repondre("Oups, une erreur est survenue lors du traitement de votre demande.");
  }
});
